#!/usr/bin/env python3
#
# Copyright (C) 2019
#

__author__ = 'Mobidic'
__authors__ = ['Henri Pegeot','Kevin Yauy','Charles Van Goethem','David Baux','Thomas Guignard']
__copyright__ = 'Copyright (C) 2019'
__license__ = 'Academic License Agreement'
__version__ = '2.0.0a'
__email__ = 'h-pegeot@chu-montpellier.fr'
__status__ = 'dev'

################################################################################
#
# IMPORT
#
################################################################################
import vcf        # read vcf => PyVCF :https://pyvcf.readthedocs.io/en/latest/
import sys        # system command
import os         # os command
import re         # regex
import argparse   # for options
import logging    # logging messages
import subprocess # launch subprocess
import collections
import mobidic_mpa


################################################################################
#
# CLASS
#
################################################################################
class LoggerAction(argparse.Action):
    """
    @summary: Manages logger level parameters (The value "INFO" becomes logging.info and so on).
    """
    def __call__(self, parser, namespace, values, option_string=None):
        log_level = None
        if values == "DEBUG":
            log_level = logging.DEBUG
        elif values == "INFO":
            log_level = logging.INFO
        elif values == "WARNING":
            log_level = logging.WARNING
        elif values == "ERROR":
            log_level = logging.ERROR
        elif values == "CRITICAL":
            log_level = logging.CRITICAL
        setattr(namespace, self.dest, log_level)

################################################################################
#
# MAIN
#
################################################################################
if __name__ == "__main__":
    # Manage parameters
    parser = argparse.ArgumentParser(description="Annotate VCF with Mobidic Prioritization Algorithm score (MPA).")
    parser.add_argument('-d', '--mpa-directory', default=os.path.dirname(os.path.abspath(__file__)), help='The path to the MPA installation folder. [Default: %(default)s]')
    parser.add_argument('-l', '--logging-level', default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"], action=LoggerAction, help='The logger level. [Default: %(default)s]')
    parser.add_argument('-v', '--version', action='version', version=__version__)

    group_input = parser.add_argument_group('Inputs') # Inputs
    group_input.add_argument('-i', '--input', required=True, help="The vcf file to annotate (format: VCF). This vcf must be annotate with annovar.")
    group_input.add_argument('-c', '--cnv-gene-list', required=False, help="A tab separated file for genes affected by CNV. (format: genename\tannotation).")
    group_input.add_argument('-p', '--pedigree', required=False, help="Duo trio or more samples: healthy/affected.")
    group_input.add_argument('-g', '--candidates-genes', required=False, help="Gene/patho panel list.")
    group_input.add_argument('-t', '--HPO-terms', required=False, help="HPO terms list.")
    group_input.add_argument('-s', '--secondary-finding-gene-list', required=False, help="Secondary finding gene list.")
    group_input.add_argument('-r', '--minimum-readDepth', required=False, help="Minimum read depth.")
    group_input.add_argument('-m', '--mosaic-ratio', required=False, help="Minimum mosaic ratio applied to heterozygous variants.")
    group_input.add_argument('-f', '--frequency-threshold', required=False, help="Minimum allele frequency.")
    group_input.add_argument('-b', '--variant-database', required=False, help="A vcf file used as variant database (format: VCF). Useful for variant occurence among samples.")
    group_input.add_argument('-w', '--weight-scores', required=False, help="A score weighting file to weight each score .")




    group_output = parser.add_argument_group('Outputs')  # Outputs
    group_output.add_argument('-o', '--output', required=True, help="The output vcf file with annotation (format : VCF)")
    args = parser.parse_args()

    # Process
    logging.basicConfig(format='%(asctime)s - %(name)s [%(levelname)s] %(message)s')
    log = logging.getLogger("MPA_score")
    log.setLevel(args.logging_level)
    log.info("Start MPA annotation")
    log.info("Command: " + " ".join(sys.argv))
    mobidic_mpa.main(args, log)
    log.info("End MPA annotation")
